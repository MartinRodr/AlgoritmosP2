ALGORITMOS PRACTICA 2

Ali Abu-afash Nayef
Martín Rodríguez Arévalo
Alejandro Patiño Jaramillo

Buscamos ordenar de menor a mayor un vector de n números enteros implementendo
los algoritmos de ordenación por inserción y ordenación Shell y a su vez determinar 
los tiempos de ejecución de ambos algoritmos.
Las tablas presentan al menos cinco valores de progresión geométrica de 2^,
sus respectivos tiempos de ejecución en microsegundos con sus respectivas cotas con 
al menos tres cifras significativas.
Para el algoritmo de ordenación por inserción se ha ejecutado con un vector ordenado 
ascendentemente, otro descendentamente y otro totalmente desordenado.
Después para el de ordenación Shell se ha ejecutado utilizando la secuencia de
incrementos de Hibbard, Knuth, Sedgewick y Ciura.
Por cada algoritmos se contrastan los tiempos con una cota subestimada, ajustada y 
sobrestimada. En el caso del algoritmo de ordenación Shell las cotas son distintas 
para cada sucesión de incrementos.
Cuando se detecta una medición inferior a la confianza establecida, en este caso de 
500 microsegundos, se resalta con el simbolo (*) y se obtiene ese tiempo mediante 
bucles de 1000 ejecuciones. Por otro lado, se han tradato de impedir y documentar 
las mediciones anómalas.

Los algoritmos fueron ejecutados en un portátil con las siguientes especificaciones:
    Kernel: x86_64 6.14.0-29-generic #29~24.04.1-Ubuntu 
    CPU: AMD Ryzen 7 7735HS @ 16x 8
    GPU: NVIDIA GeForce RTX 4060 Laptop GPU
    RAM: 15592 MB


Algoritmo Insercion: Vector Ascendente
         n             t (n)     t (n) / n^1.8       t (n) / n^2     t (n) / n^2.2
(*)    500          3.138000     0.00004350177     0.00001255200     0.00000362175
(*)   1000          6.724000     0.00002676873     0.00000672400     0.00000168899
(*)   2000          7.059000     0.00000807029     0.00000176475     0.00000038590
(*)   4000         14.094000     0.00000462729     0.00000088087     0.00000016769
(*)   8000         27.806000     0.00000262166     0.00000043447     0.00000007200
(*)  16000         56.465000     0.00000152884     0.00000022057     0.00000003182
(*)  32000        103.387000     0.00000080389     0.00000010096     0.00000001268
(*)  64000        396.248000     0.00000088480     0.00000009674     0.00000001058
    128000        781.000000     0.00000050081     0.00000004767     0.00000000454
    256000       1607.000000     0.00000029593     0.00000002452     0.00000000203
    512000       3189.000000     0.00000016864     0.00000001217     0.00000000088
    
- n^1.8 es una cota subestimada
- n^2 es una cota ajustada con una constante C = 0.00000000609
- n^2.2 es una cota sobrestimada

Algoritmo Insercion: Vector Descendente
         n             t (n)     t (n) / n^1.8       t (n) / n^2     t (n) / n^2.2
       500        536.000000          0.007431          0.002144         0.0006186
      1000       2189.000000          0.008715          0.002189         0.0005499
      2000       9036.000000          0.010331          0.002259         0.0004940
      4000      36683.000000          0.012044          0.002293         0.0004364
      8000     135182.000000          0.012746          0.002112         0.0003500
     16000     548412.000000          0.014849          0.002142         0.0003091
     32000    2162146.000000          0.016812          0.002111         0.0002652
     64000    6648395.000000          0.014845          0.001623         0.0001775
    128000   10375986.000000          0.006654          0.000633         0.0000603
    256000   42805135.000000          0.007882          0.000653         0.0000541
    512000  168183354.000000          0.008894          0.000642         0.0000463

- n^1.8 es una cota subestimada
- n^2 es una cota ajustada con una constante C = 0.000640
- n^2.2 es una cota sobrestimada

Algoritmo Insercion: Vector Desordenado
         n             t (n)     t (n) / n^1.8       t (n) / n^2     t (n) / n^2.2
(*)    500         82.912000          0.001149          0.000332         0.0000957
(*)   1000        322.153000          0.001283          0.000322         0.0000809
      2000       1386.000000          0.001585          0.000347         0.0000758
      4000       5709.000000          0.001874          0.000357         0.0000679
      8000      21399.000000          0.002018          0.000334         0.0000554
     16000      83384.000000          0.002258          0.000326         0.0000470
     32000     323551.000000          0.002516          0.000316         0.0000397
     64000    1298454.000000          0.002899          0.000317         0.0000347
    128000    5295748.000000          0.003396          0.000323         0.0000308
    256000   21070475.000000          0.003880          0.000322         0.0000266
    512000   83812830.000000          0.004432          0.000320         0.0000231

- n^1.8 es una cota subestimada
- n^2 es una cota ajustada con una constante C = 0.000320
- n^2.2 es una cota sobrestimada



Algoritmo Shell: Hibbard
         n             t (n)  t (n) / n*log(n)    t (n) / n^1.18     t (n) / n^1.3
(*)    500         31.515000          0.010142         0.0205936          0.009769
(*)   1000         73.724000          0.010673         0.0212622          0.009281
(*)   2000        174.597000          0.011485         0.0222240          0.008927
(*)   4000        388.012000          0.011695         0.0217979          0.008057
      8000        866.000000          0.012045         0.0214720          0.007303
     16000       1959.000000          0.012648         0.0214374          0.006709
     32000       4388.000000          0.013219         0.0211929          0.006103
     64000      10348.000000          0.014610         0.0220579          0.005846
    128000      21381.000000          0.014204         0.0201150          0.004905
    256000      46619.000000          0.014624         0.0193571          0.004344
    512000     103190.000000          0.015331         0.0189103          0.003905

- n*log(n) es una cota subestimada
- n^1.18 es una cota ajustada con una constante C = 0.020947
- n^1.3 es una cota sobrestimada

Algoritmo Shell: Knuth
         n             t (n)     t (n) / n^1.1    t (n) / n^1.16     t (n) / n^1.3
(*)    500         28.855000         0.0309995          0.021351          0.008945
(*)   1000         63.218000         0.0316841          0.020933          0.007959
(*)   2000        159.063000         0.0371909          0.023571          0.008133
(*)   4000        345.864000         0.0377259          0.022936          0.007182
      8000        766.000000         0.0389789          0.022732          0.006460
     16000       1668.000000         0.0395972          0.022152          0.005713
     32000       3748.000000         0.0415083          0.022275          0.005213
     64000       8506.000000         0.0439468          0.022623          0.004805
    128000      18144.000000         0.0437323          0.021596          0.004163
    256000      42126.000000         0.0473681          0.022438          0.003925
    512000      87884.000000         0.0461013          0.020949          0.003326

- n^1.1 es una cota subestimada
- n^1.16 es una cota ajustada con una constante C = 0.002405
- n^1.3 es una cota sobrestimada

Algoritmo Shell: Sedgewick
         n             t (n)     t (n) / n^1.1    t (n) / n^1.12     t (n) / n^1.3
(*)    500         27.448000          0.054896          0.026041         0.0085084
(*)   1000         61.291000          0.061291          0.026754         0.0077161
(*)   2000        148.137000          0.074068          0.029752         0.0075740
(*)   4000        320.402000          0.080100          0.029607         0.0066530
      8000        716.000000          0.089500          0.030441         0.0060380
     16000       1538.000000          0.096125          0.030084         0.0052674
     32000       3269.000000          0.102156          0.029420         0.0045469
     64000       7895.000000          0.123359          0.032691         0.0044598
    128000      15123.000000          0.118148          0.028811         0.0034695
    256000      32359.000000          0.126402          0.028364         0.0030150
    512000      69821.000000          0.136369          0.028158         0.0026420

- n^1.1 es una cota subestimada
- n^1.12 es una cota ajustada con una constante C = 0.028321
- n^1.3 es una cota sobrestimada

Algoritmo Shell: Ciura
         n             t (n)         t (n) / n    t (n) / n^1.11 t (n) / n*log^2(n)
(*)    500         29.892000          0.059784         0.0301785          0.001548
(*)   1000         68.535000          0.068535         0.0320562          0.001436
(*)   2000        161.570000          0.080785         0.0350120          0.001398
(*)   4000        351.869000          0.087967         0.0353260          0.001279
      8000        780.000000          0.097500         0.0362798          0.001207
     16000       1699.000000          0.106188         0.0366117          0.001133
     32000       3672.000000          0.114750         0.0366595          0.001066
     64000       8951.000000          0.139859         0.0414011          0.001142
    128000      17151.000000          0.133992         0.0367525          0.000969
    256000      37266.000000          0.145570         0.0369970          0.000939
    512000      78540.000000          0.153398         0.0361244          0.000888

- n es una cota subestimada
- n^1.11 es una cota ajustada con una constante C = 0.036429
- n*log^2(n) es una cota sobrestimada



Para las ordenaciones por inserción cuando el vector está totalmente ordenado se 
puede observar que los tiempos de ejecucción son realmente bajos, ya que unicamente 
comprueba que el vector esté ordenado, y sería el mejor caso posible. Después, para cuando el vector está ordenado de mayor a menor, se obtienen unos tiempos ya mucho más 
grandes debido a que es el peor caso posible para este algoritmo. Y por último, cuando el vector está desordenado, es decir, el caso promedio, los tiempos son aproximadamente la mitad que cuando el vector está ordenado descendentemente.

Para las ordenaciones Shell se obtuvieron cotas más ajustadas, pero se aproximaron a
dos decimales, que eran 1.163 para Knuth, 1.118 para Sedgewick y 1.1072 para Ciura.
Viendo los tiempos obtenidos con ordenaciones Shell podemos asegurar que la secuencia 
de incrementos más eficaz, teniendo en cuenta los resultados obtenidos en las tablas, 
es la de Sedgewick y la menos eficaz la de Hibbard.
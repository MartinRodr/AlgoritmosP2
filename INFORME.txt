ALGORITMOS PRACTICA 2

Ali Abu-afash Nayef
Martín Rodríguez Arévalo
Alejandro Patiño Jaramillo

Buscamos ordenar de menor a mayor un vector de n números enteros implementendo
los algoritmos de ordenación por inserción y ordenación Shell y a su vez determinar 
los tiempos de ejecución de ambos algoritmos.
Las tablas presentan al menos cinco valores de progresión geométrica de 2^ y
sus respectivos tiempos de ejecución en microsegundos con al menos tres cifras
significativas.
Para el algoritmo de ordenación por inserción se ha ejecutado con un vector ordenado 
ascendentemente, otro descendentamente y otro totalmente desordenado.
Después para el de ordenación Shell se ha ejecutado utilizando la secuencia de
incrementos de Hibbard, Knuth, Sedgewick y Ciura.
Por cada algoritmos se contrastan los tiempos con una cota subestimada, ajustada y 
sobrestimada. En el caso del algoritmo de ordenación Shell las cotas son
distintas para cada sucesión de incrementos.
Cuando se detecta una medición inferior a la confianza establecida, en este caso de 
500 microsegundos, se resalta con el simbolo (*) y se obtiene ese tiempo mediante 
bucles de 1000 ejecuciones. Por otro lado, se han tradato de impedir y documentar 
las mediciones anómalas.

Los algoritmos fueron ejecutados en un portátil con las siguientes especificaciones:

    Kernel: x86_64 6.14.0-29-generic #29~24.04.1-Ubuntu 
    CPU: AMD Ryzen 7 7735HS @ 16x 8
    GPU: NVIDIA GeForce RTX 4060 Laptop GPU
    RAM: 15592 MB

Algoritmo Insercion: Vector Ascendente
         n             t (n)     t (n) / n^1.8       t (n) / n^2     t (n) / n^2.2
(*)    500          3.082000     0.00004272545     0.00001232800     0.00000355712
(*)   1000          6.222000     0.00002477023     0.00000622200     0.00000156290
(*)   2000         12.446000     0.00001422905     0.00000311150     0.00000068040
(*)   4000         25.064000     0.00000822891     0.00000156650     0.00000029821
(*)   8000         36.457000     0.00000343731     0.00000056964     0.00000009440
(*)  16000         56.580000     0.00000153196     0.00000022102     0.00000003189
(*)  32000        113.423000     0.00000088192     0.00000011076     0.00000001391
(*)  64000        177.633000     0.00000039664     0.00000004337     0.00000000474
    128000        803.000000     0.00000051492     0.00000004901     0.00000000467
    256000       1591.000000     0.00000029298     0.00000002428     0.00000000201
    512000       3192.000000     0.00000016880     0.00000001218     0.00000000088
Cte = 0.000002
- n^1.8 es una cota subestimada
- n^2 es una cota ajustada con una constante C = 0.000002
- n^2.2 es una cota sobrestimada

Algoritmo Insercion: Vector Descendente
         n             t (n)     t (n) / n^1.8       t (n) / n^2     t (n) / n^2.2
       500        533.000000          0.007389          0.002132         0.0006152
      1000       2142.000000          0.008527          0.002142         0.0005380
      2000       8498.000000          0.009715          0.002125         0.0004646
      4000      34031.000000          0.011173          0.002127         0.0004049
      8000     133331.000000          0.012571          0.002083         0.0003452
     16000     533722.000000          0.014451          0.002085         0.0003008
     32000    2128848.000000          0.016553          0.002079         0.0002611
     64000    6929488.000000          0.015473          0.001692         0.0001850
    128000   10549518.000000          0.006765          0.000644         0.0000613
    256000   41908589.000000          0.007717          0.000639         0.0000530
    512000  169734969.000000          0.008976          0.000647         0.0000467
Cte = 0.001709
- n^1.8 es una cota subestimada
- n^2 es una cota ajustada con una constante C = 0.001709
- n^2.2 es una cota sobrestimada

Algoritmo Insercion: Vector Desordenado
         n             t (n)     t (n) / n^1.8       t (n) / n^2     t (n) / n^2.2
(*)    500         87.240000          0.001209          0.000349         0.0001007
(*)   1000        335.414000          0.001335          0.000335         0.0000843
      2000       1304.000000          0.001491          0.000326         0.0000713
      4000       5180.000000          0.001701          0.000324         0.0000616
      8000      21050.000000          0.001985          0.000329         0.0000545
     16000      83897.000000          0.002272          0.000328         0.0000473
     32000     331951.000000          0.002581          0.000324         0.0000407
     64000    1317751.000000          0.002942          0.000322         0.0000352
    128000    5329462.000000          0.003417          0.000325         0.0000310
    256000   21523399.000000          0.003964          0.000328         0.0000272
    512000   85403401.000000          0.004516          0.000326         0.0000235
Cte = 0.000484
- n^1.8 es una cota subestimada
- n^2 es una cota ajustada con una constante C = 0.000484
- n^2.2 es una cota sobrestimada

Algoritmo Shell: Hibbard
         n             t (n)  t (n) / n*log(n)    t (n) / n^1.18     t (n) / n^1.3
(*)    500         31.642000          0.010183         0.0206766          0.009809
(*)   1000         73.766000          0.010679         0.0212743          0.009287
(*)   2000        169.706000          0.011164         0.0216014          0.008677
(*)   4000        383.298000          0.011553         0.0215331          0.007959
      8000        859.000000          0.011948         0.0212984          0.007244
     16000       2001.000000          0.012919         0.0218970          0.006853
     32000       4383.000000          0.013204         0.0211687          0.006096
     64000       9905.000000          0.013985         0.0211136          0.005595
    128000      21994.000000          0.014612         0.0206917          0.005046
    256000      47064.000000          0.014763         0.0195419          0.004385
    512000     105809.000000          0.015720         0.0193903          0.004004
Cte = 0.020947
- n*log(n) es una cota subestimada
- n^1.18 es una cota ajustada con una constante C = 0.020947
- n^1.3 es una cota sobrestimada

Algoritmo Shell: Knuth
         n             t (n)     t (n) / n^1.1    t (n) / n^1.16     t (n) / n^1.3
(*)    500         29.304000         0.0314818          0.021683          0.009084
(*)   1000         66.364000         0.0332608          0.021975          0.008355
(*)   2000        150.758000         0.0352490          0.022340          0.007708
(*)   4000        336.819000         0.0367393          0.022336          0.006994
      8000        765.000000         0.0389280          0.022703          0.006451
     16000       1707.000000         0.0405230          0.022670          0.005846
     32000       3759.000000         0.0416301          0.022341          0.005229
     64000       9198.000000         0.0475221          0.024464          0.005196
    128000      19060.000000         0.0459401          0.022686          0.004373
    256000      39672.000000         0.0446088          0.021131          0.003696
    512000      90520.000000         0.0474840          0.021577          0.003425

- n^1.1 es una cota subestimada
- n^1.16 es una cota ajustada con una constante C = 0.002405
- n^1.3 es una cota sobrestimada

Algoritmo Shell: Sedgewick
         n             t (n)     t (n) / n^1.1    t (n) / n^1.12     t (n) / n^1.3
(*)    500         27.344000          0.054688          0.025943         0.0084762
(*)   1000         61.874000          0.061874          0.027009         0.0077895
(*)   2000        139.748000          0.069874          0.028067         0.0071451
(*)   4000        307.970000          0.076993          0.028458         0.0063949
      8000        706.000000          0.088250          0.030015         0.0059537
     16000       1509.000000          0.094312          0.029517         0.0051681
     32000       3264.000000          0.102000          0.029375         0.0045400
     64000       7875.000000          0.123047          0.032608         0.0044485
    128000      15032.000000          0.117438          0.028638         0.0034486
    256000      32314.000000          0.126227          0.028324         0.0030108
    512000      68868.000000          0.134508          0.027774         0.0026060

- n^1.1 es una cota subestimada
- n^1.12 es una cota ajustada con una constante C = 0.028321
- n^1.3 es una cota sobrestimada

Algoritmo Shell: Ciura
         n             t (n)         t (n) / n    t (n) / n^1.11t (n) / n*log^2(n)
(*)    500         29.987000          0.059974         0.0302745          0.001553
(*)   1000         69.125000          0.069125         0.0323322          0.001449
(*)   2000        155.688000          0.077844         0.0337374          0.001347
(*)   4000        345.489000          0.086372         0.0346855          0.001256
      8000        771.000000          0.096375         0.0358612          0.001193
     16000       1678.000000          0.104875         0.0361592          0.001119
     32000       3689.000000          0.115281         0.0368292          0.001071
     64000       8422.000000          0.131594         0.0389543          0.001074
    128000      17205.000000          0.134414         0.0368682          0.000972
    256000      37323.000000          0.145793         0.0370536          0.000940
    512000      78995.000000          0.154287         0.0363337          0.000893

- n es una cota subestimada
- n^1.11 es una cota ajustada con una constante C = 0.036429
- n*log^2(n) es una cota sobrestimada

(*Conclusión con datos)

Insercion:
Para las tres tablas de inserción las cotas son: la subestimada n^1.8; la ajustada 
n^2, con una constante  """"", y la sobreestimada n^2.2.
Insercion: Ascendente
Los tiempos de ejecución son realmente bajos ya que basicamente recorre el vector
comprobando que los elementos estén ordenados de menor a mayor.
Insercion: Descendente
Los tiempos de ejecución ya son mucho mayores ya que es el peor caso posible para
este algoritmo.
Insercion: Desordenado
Los tiempos de ejecución se pueden observar que son prácticamente la mitad que los
obtenidos para cuando el vector está ordenado de mayor a menor.

Shell: Hibbard
La cota subestimada es n * log(n), la ajustada n^1.18 y la sobrestimada n^1.3.
La cota ajustada tiende a una constante """""

Shell: Knuth
La cota subestimada es n^1.1, la ajustada n^1.163 y la sobrestimada n^1.3.
La cota ajustada tiende a una constante """""

Shell: Sedgewick
La cota subestimada es n^1.1, la ajustada n^1.118 y la sobrestimada n^1.3.
La cota ajustada tiende a una constante """""

Shell: Ciura
La cota subestimada es n, la ajustada n^1.1072 y la sobrestimada n*log(n).
La cota ajustada tiende a una constante """""


Shell:
Viendo los tiempos obtenidos podemos asegurar que la secuencia de incrementos más
eficaz, teniendo en cuenta la cantidad de elementos empleados en las tablas, es la
de Sedgewick y la menos eficaz la de Hibbard.